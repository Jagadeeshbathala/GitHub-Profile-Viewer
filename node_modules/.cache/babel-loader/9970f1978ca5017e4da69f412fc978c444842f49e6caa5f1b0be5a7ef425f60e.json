{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rajas\\\\OneDrive\\\\Desktop\\\\GitHub Profile\\\\my-app\\\\src\\\\pages\\\\RepositoryListPage.js\",\n  _s = $RefreshSig$();\n// src/pages/RepositoryListPage.js\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Repository from '../components/Repository';\nimport Pagination from '../components/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RepositoryListPage() {\n  _s();\n  const {\n    username\n  } = useParams();\n  const [repositories, setRepositories] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [reposPerPage] = useState(10);\n  useEffect(() => {\n    const fetchRepositories = async () => {\n      try {\n        const response = await fetch(`https://api.github.com/users/${username}/repos`);\n        const repoData = await response.json();\n        setRepositories(repoData);\n      } catch (error) {\n        console.error('Error fetching repositories:', error);\n      }\n    };\n    fetchRepositories();\n  }, [username]);\n\n  // Pagination\n  const indexOfLastRepo = currentPage * reposPerPage;\n  const indexOfFirstRepo = indexOfLastRepo - reposPerPage;\n  const currentRepos = repositories.slice(indexOfFirstRepo, indexOfLastRepo);\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [currentRepos.map(repo => /*#__PURE__*/_jsxDEV(Repository, {\n      repository: repo\n    }, repo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Pagination, {\n      reposPerPage: reposPerPage,\n      totalRepos: repositories.length,\n      paginate: paginate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(RepositoryListPage, \"uikfrfSSWVUhvRbHysNKiTdhce8=\", false, function () {\n  return [useParams];\n});\n_c = RepositoryListPage;\nexport default RepositoryListPage;\nvar _c;\n$RefreshReg$(_c, \"RepositoryListPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Repository","Pagination","jsxDEV","_jsxDEV","RepositoryListPage","_s","username","repositories","setRepositories","currentPage","setCurrentPage","reposPerPage","fetchRepositories","response","fetch","repoData","json","error","console","indexOfLastRepo","indexOfFirstRepo","currentRepos","slice","paginate","pageNumber","children","map","repo","repository","id","fileName","_jsxFileName","lineNumber","columnNumber","totalRepos","length","_c","$RefreshReg$"],"sources":["C:/Users/rajas/OneDrive/Desktop/GitHub Profile/my-app/src/pages/RepositoryListPage.js"],"sourcesContent":["// src/pages/RepositoryListPage.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport Repository from '../components/Repository';\r\nimport Pagination from '../components/Pagination';\r\n\r\nfunction RepositoryListPage() {\r\n  const { username } = useParams();\r\n  const [repositories, setRepositories] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [reposPerPage] = useState(10);\r\n\r\n  useEffect(() => {\r\n    const fetchRepositories = async () => {\r\n      try {\r\n        const response = await fetch(`https://api.github.com/users/${username}/repos`);\r\n        const repoData = await response.json();\r\n        setRepositories(repoData);\r\n      } catch (error) {\r\n        console.error('Error fetching repositories:', error);\r\n      }\r\n    };\r\n\r\n    fetchRepositories();\r\n  }, [username]);\r\n\r\n  // Pagination\r\n  const indexOfLastRepo = currentPage * reposPerPage;\r\n  const indexOfFirstRepo = indexOfLastRepo - reposPerPage;\r\n  const currentRepos = repositories.slice(indexOfFirstRepo, indexOfLastRepo);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  return (\r\n    <div>\r\n      {currentRepos.map((repo) => (\r\n        <Repository key={repo.id}  repository={repo} />\r\n      ))}\r\n      <Pagination\r\n        reposPerPage={reposPerPage}\r\n        totalRepos={repositories.length}\r\n        paginate={paginate}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RepositoryListPage;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAS,CAAC,GAAGP,SAAS,CAAC,CAAC;EAChC,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACc,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BR,QAAS,QAAO,CAAC;QAC9E,MAAMS,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACtCR,eAAe,CAACO,QAAQ,CAAC;MAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDL,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMa,eAAe,GAAGV,WAAW,GAAGE,YAAY;EAClD,MAAMS,gBAAgB,GAAGD,eAAe,GAAGR,YAAY;EACvD,MAAMU,YAAY,GAAGd,YAAY,CAACe,KAAK,CAACF,gBAAgB,EAAED,eAAe,CAAC;EAE1E,MAAMI,QAAQ,GAAIC,UAAU,IAAKd,cAAc,CAACc,UAAU,CAAC;EAE3D,oBACErB,OAAA;IAAAsB,QAAA,GACGJ,YAAY,CAACK,GAAG,CAAEC,IAAI,iBACrBxB,OAAA,CAACH,UAAU;MAAgB4B,UAAU,EAAED;IAAK,GAA3BA,IAAI,CAACE,EAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAsB,CAC/C,CAAC,eACF9B,OAAA,CAACF,UAAU;MACTU,YAAY,EAAEA,YAAa;MAC3BuB,UAAU,EAAE3B,YAAY,CAAC4B,MAAO;MAChCZ,QAAQ,EAAEA;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC5B,EAAA,CAvCQD,kBAAkB;EAAA,QACJL,SAAS;AAAA;AAAAqC,EAAA,GADvBhC,kBAAkB;AAyC3B,eAAeA,kBAAkB;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}